name: Release
on:
  release:
    types: [published]

strategy:
  matrix:
    platform: [
      { target: "x86_64-pc-windows-msvc", os: "windows-latest" },
      { target: "x86_64-unknown-linux-gnu", os: "ubuntu-latest" },
      { target: "x86_64-apple-darwin", os: "macos-latest" }
    ]

jobs:
  release:
    strategy:
      matrix:
        platform: [
          { target: "x86_64-pc-windows-msvc", os: "windows-latest" },
          { target: "x86_64-unknown-linux-gnu", os: "ubuntu-latest" },
          { target: "x86_64-apple-darwin", os: "macos-latest" }
        ]
    name: Build for Release
    runs-on: { matrix.platform.os }
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Show rust env
      run: |
        rustc --version
        cargo --version

    - name: cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: install dependencies
      if: runner.os != 'windows-latest'
      run: |
        # for linux
        if [ "${{ runner.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install libssl-dev -y
        fi
        # for macos
        if [ "${{ runner.os }}" == "macos-latest" ]; then
          brew install openssl
        fi

    - name: Build
      run: |
        cargo build --release --verbose --locked
    
    - name: Rename binary
      run: |
        from = "target/release/auto-delete-email"
        if [ "${{ runner.os }}" == "windows-latest" ]; then
          from = "${from}.exe"
        fi

        mkdir -p /tmp/release
        zip -j /tmp/release/auto-delete-email-${{ matrix.platform.target }}.zip "${from}"

    - name: Upload artifact
      run: |
        gh release upload "${GITHUB_REF/refs\/tags\//}" /tmp/release/*.zip --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
